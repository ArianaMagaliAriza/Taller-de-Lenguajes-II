(Falta compilar para ver si funciona y guardar la descripcion en la db)

package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class CompraDao {
  
  public static void realizarCompra(Connection connection){
    
     Scanner scanner = new Scanner(System.in);

        // Solicita información al usuario
        System.out.print("Ingrese la criptomoneda a comprar (nomenclatura): ");
        String criptoComprada = scanner.nextLine().toUpperCase();

        System.out.print("Ingrese la moneda FIAT (nomenclatura): ");
        String monedaFiat = scanner.nextLine().toUpperCase();

        System.out.print("Ingrese la cantidad disponible en " + monedaFiat + ": ");
        double cantidadFiat = scanner.nextDouble();
        scanner.nextLine();
        
        try {
          if (!existeCripto(connection, criptoComprada)){
            cargarMoneda (??)
          }
           if (!existeCripto(connection, monedaFiat)){
            cargarMoneda (??) 
        }
        
          // Obtener el valores
          double valorFiat = obtenerValorCripto(connection, monedaFiat);
          double stockFiat = obtenerStockCripto(connection, monedaFiat);

          double valorCripto = obtenerValorCripto(connection, criptoComprada);

          // Verificar que haya suficiente stock
          if (stockFiat < cantidadFiat) {
              System.out.println("Stock insuficiente en " + monedaFiat + " para realizar la compra.");
              return;
          }

          // Calcular la cantidad de cripto a comprar
          double cantidadCripto = (cantidadFiat / valorFiat) * valorCripto;

          // Confirmar la compra
          System.out.printf("Vas a comprar %.6f %s con %.2f %s%n", cantidadCripto, criptoComprada, cantidadFiat, monedaFiat);
          System.out.print("¿Deseas confirmar la operación? (si/no): ");
          String confirmacion = scanner.nextLine().toLowerCase();

          if (!confirmacion.equals("si")) {
              System.out.println("Operación cancelada.");
              return;
          }
  
          //actualizar los stocks
          actualizarStock(connection, criptoComprada, cantidadCripto);
          actualizarStock(connection, monedaFiat, -cantidadFiat);
          
          System.out.println("Compra realizada con éxito.");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            scanner.close();
        }
            
            
            
        private static boolean existeCripto(Connection connection, String cripto) throws SQLException {
          String query = "SELECT COUNT(*) FROM activos WHERE nomenclatura = ?";
          try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, cripto);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getInt(1) > 0;
            }
        }
        return false;
    }

        private static double obtenerValorCripto(Connection connection, String cripto) throws SQLException {
          String query = "SELECT valor FROM activos WHERE nomenclatura = ?";
          try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, cripto);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getDouble("valor");
            }
        }
        return 0;
    }

      private static double obtenerStockCripto(Connection connection, String cripto) throws SQLException {
        String query = "SELECT stock FROM activos WHERE nomenclatura = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setString(1, cripto);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getDouble("stock");
            }
        }
        return 0;
    }

      private static void actualizarStock(Connection connection, String cripto, double cantidad) throws SQLException {
        String query = "UPDATE activos SET stock = stock + ? WHERE nomenclatura = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setDouble(1, cantidad);
            statement.setString(2, cripto);
            statement.executeUpdate();
        }
    }
  }
}
