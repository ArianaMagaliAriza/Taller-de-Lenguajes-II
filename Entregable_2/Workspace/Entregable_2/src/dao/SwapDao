(Falta compilar para ver si funciona y guardar la descripcion en la db)

package dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;


public class Swap {
  
    public static void realizarSwap(Connection connection) {
        Scanner scanner = new Scanner(System.in);
        
        //Ingresar informacion
        System.out.print("Ingrese la criptomoneda a convertir (nomenclatura): ");
        String criptoOrigen = scanner.nextLine().toUpperCase();

        System.out.print("Ingrese la cantidad a convertir: ");
        double cantidad = scanner.nextDouble();
        scanner.nextLine();

        System.out.print("Ingrese la criptomoneda esperada (nomenclatura): ");
        String criptoDestino = scanner.nextLine().toUpperCase();

          try {
            // Verificar que existen
            if (!existeCripto(connection, criptoOrigen) || !existeCripto(connection, criptoDestino)) {
                System.out.println("Una o ambas criptomonedas no se encuentran en tus activos.");
                return;
            }

            // Obtener el valor en dólares y stock de la criptomoneda origen y destino
            double valorOrigen = obtenerValorCripto(connection, criptoOrigen);
            double stockOrigen = obtenerStockCripto(connection, criptoOrigen);
            double valorDestino = obtenerValorCripto(connection, criptoDestino);


            if (stockOrigen < cantidad) {
                System.out.println("Stock insuficiente para realizar el swap.");
                return;
            }

            double cantidadConvertida = (cantidad * valorOrigen) / valorDestino;

            // Confirmar el swap
            System.out.printf("Vas a convertir %.2f %s a %.2f %s%n", cantidad, criptoOrigen, cantidadConvertida, criptoDestino);
            System.out.print("¿Deseas confirmar la operación? (si/no): ");
            String confirmacion = scanner.nextLine().toLowerCase();

            if (!confirmacion.equals("si")) {
                System.out.println("Operación cancelada.");
                return;
            }

            // Actualizar los activos del usuario
            actualizarStock(connection, criptoOrigen, -cantidad);
            actualizarStock(connection, criptoDestino, cantidadConvertida);

            System.out.println("Swap realizado con éxito.");
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            scanner.close();
        }
    }

    //Chequea que exista la cripto en la bd
    private static boolean existeCripto(Connection connection, String cripto) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement("SELECT COUNT(*) FROM activos WHERE nomenclatura = ?")) {
            statement.clearParameters(); //Va siempre??
            statement.setString(1, cripto);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getInt(1) > 0;
            }
        }
        return false;
    }

    //Devuelve el valor en dolares de la cripto
    private static double obtenerValorCripto(Connection connection, String cripto) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement("SELECT valor FROM activos WHERE nomenclatura = ?")) {
            statement.clearParameters();
            statement.setString(1, cripto);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getDouble("valor");
            }
        }
        return 0;
    }

    //Devuelve el stock de la cripto
    private static double obtenerStockCripto(Connection connection, String cripto) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement("SELECT stock FROM activos WHERE nomenclatura = ?")) {
            statement.clearParameters();
            statement.setString(1, cripto);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                return resultSet.getDouble("stock");
            }
        }
        return 0;
    }

    //Actualiza el stock de la cripto (not sure)
    private static void actualizarStock(Connection connection, String cripto, double cantidad) throws SQLException {
        String query = "UPDATE activos SET stock = stock + ? WHERE nomenclatura = ?";
        try (PreparedStatement statement = connection.prepareStatement(query)) {
            statement.setDouble(1, cantidad);
            statement.setString(2, cripto);
            statement.executeUpdate(); //Chequear si se hace asi
        }
    }
}
